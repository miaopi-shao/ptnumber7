在修改功能執行方式時，有一些區塊需要特別注意，確保不會影響到應用程式的運行。以下是一些不應輕易修改的部分：


-------------------------------------------------------------------------------------------------------------

1.class 和 id（HTML、CSS 和 JavaScript 部分）：

如果前端部分（例如 index.html 或 CSS）和 JavaScript 使用了特定的 class 或 id，這些值應該保留，
因為它們與前端展示及與後端交互的功能（如提交表單或觸發事件）直接相關。
如果修改這些 class 或 id，可能會導致原本的 JavaScript 事件無法正確觸發，或是表單提交的資料錯誤。

-------------------------------------------------------------------------------------------------------------

2.路由 (@app.route) 和函數名稱：

修改路由或函數名稱可能會影響到 URL 路徑和功能的對應關係。

這些需要確保前端和後端的對應是一致的，特別是 API 呼叫。

若改變路由名稱，需確保前端的請求也要更新到新的路徑。

-------------------------------------------------------------------------------------------------------------

3.資料庫模型 (User, Item, 等等)：

如果你的資料庫結構變動（如新增欄位或修改欄位型態），需要對應到資料庫的 migration（遷移）機制，避免資料丟失。

修改資料模型時，要注意對應的 SQLAlchemy 操作，確保資料庫結構保持一致。



4.模板和靜態資源的對應：

當你修改模板（HTML）或靜態資源（CSS/JS）時，特別是和後端邏輯互動的部分，
這些檔案應保持更新，確保它們能夠正確顯示和處理數據。

如果新增了某些 JavaScript 或 CSS 操作，確保前端和後端邏輯一致，且相應的資源有正確引用。



5.Blueprint 的導入：

如果你分割功能區域為不同的 Blueprint，每個 Blueprint 都應有獨立的視圖函數和路由設定。
當你新增或修改某個功能區域時，務必確認它與其他功能區域的依賴不會互相衝突。

-------------------------------------------------------------------------------------------------------------

總的來說，在改變功能執行方式時，應該要小心地檢查這些核心部分，
並確保每個區域之間的互動和依賴關係不會被破壞。
如果確實需要進行修改，記得測試整體應用是否運行正常，特別是在功能間的協作上。